# API

# Group Server

## HealthCheck [/]

### / [GET]

Serves as a healthcheck for the server

+ Response 200 (text/plain)
    + Body

                Hello World!

## Server Info [/api]

### API /api [GET]

Return a JSON object containing information about the server

+ Response 200 (application/json)
    + Body

                {
                    "constraints": {
                        "request": {
                            "max_size": 20971520
                        }
                    },
                    "version": "0.85.0"
                }

# Group Admin UI

## Admin UI [/admin]

If an admin UI folder was specified when the server was started, serve it at `/admin`

## /admin [GET]

+ Response 200

## Group Metadata

### All Meta [/api/meta]

Return an array containing all the meta keys stored on the server

Meta data provides a simple interface for storing server wide `key:value`
pairs that can be used by Hecate clients. Most notably the default admin UI
will use this API for setting things like; default layers, data license, server name, etc.

#### /api/meta [GET]

+ Response 200 (application/json)
    + Body

                [
                    "name",
                    "layers"
                [

### Individual Meta [/api/meta/{key}]

+ Parameters
    + key: name (String) - A unique key for referencing a value

#### /api/meta/{key} [POST]

Create and store a new `key:value` pair, overwriting any existing value.

The key should be the URL encoded `{key}` value, while the value can be any JSON
value included in the request body.

+ Request JSON Value

    + Headers

            Content-Type: application/json

    + Body

            "Cool Hecate Server"

+ Response 200 (application/json)
    + Body

                {
                    "key": "name",
                    "value": "Cool Hecate Server"
                }

#### /api/meta/{key} [GET]

Return the `key:value` pair for the requested `{key}` value.

+ Response 200 (application/json)
    + Body

                {
                    "key": "name",
                    "value": "Cool Hecate Server"
                }

+ Response 404 (application/json)
    + Body

                {
                    "code": 404,
                    "reason", "Key not found",
                    "status", "Not Found"
                }

#### /api/meta/{key} [DELETE]

Permanently remove the `key:value` pair for the requested `{key}` value,
returning the deleted `key:value` pair.

+ Response 200 (application/json)

    The metadata object was deleted successfully.

    + Body

                {
                    "key": "name",
                    "value": "Cool Hecate Server"
                }

+ Response 404 (application/json)

    The requested `{key}` could not be found on the server

    + Body

                {
                    "key": "name",
                    "value": "Cool Hecate Server"
                }

## Group Authentication

### Authentication [/api/auth]

#### /api/auth [GET]

Return a Custom Authentication JSON object, documenting what permissions
are required for any given API endpoint on the server. Used by both the Admin UI
and HecateJS to determine if auth is needed before making a given API request.

+ Response 200 (application/json)
    + Body

                {
                    "See Custom Auth for example"
                }

## Group Styles

### Server Styles [/api/styles]

#### /api/styles [GET]

Return an array containing a reference to every public style

+ Response 200 (application/json)
    + Body

                [{
                    "id": 1,
                    "name": "Style Name",
                    "public": true,
                    "uid": 1,,
                    "username": "ingalls"
                }]

### User Styles [/api/styles/{uid}]

+ Parameters
    + uid: 1 (integer) - The user ID to lookup styles for

#### /api/styles/{uid} [GET]

Return an array containing styles owned by a particular user.

By default any request will only return the public styles for a given user.

If an authenticated user requests their own styles, it will return their public and private styles.

+ Response 200 (application/json)

### Create Stypes [/api/style]

#### /api/style [POST]

Create a new private style attached to the authenticated user

+ Response 200 (application/json)

### Individual Styles [/api/style/{style_id}]

+ Parameters
    + style_id: 1 (integer) - The style ID to lookup

#### /api/style/{style_id} [GET]

Get a particular style by id, public styles can be requested unauthenticated, private styles can only be obtained by the corresponding user making the request.

+ Response 200 (application/json)

#### /api/style/{style_id} [DELETE]

Delete a particular style by id. Users must be authorized and can only delete styles created by them.

+ Response 200 (application/json)

#### /api/style/{style_id} [PATCH]

Update a style - auth required - users can only update their own styles

+ Response 200 (application/json)

## Group JSON Schema

### JSON Schema [/api/schema]

#### /api/schema [GET]

Return a [JSON Schema](https://json-schema.org/) that all Feature properties must conform to.

+ Response 200 (application/json)
    + Body

                {
                    "See JSON Schema link for examples"
                }

## Group Deltas

## Group Webhooks

## Group Tiles

## Group Users

## Group Data

### Data Stats [/api/data/stats]

#### /api/data/stats [GET]

Return a JSON object containing statistics and metadata about the geometries stored in the server

+ Response 200 (application/json)
    + Body

                {
                    "bbox":  [0,0,1,1],
                    "last_calc": null,
                    "total":0
                }

### Data Stats Regen [/api/data/stats/regen]

#### /api/data/stats/regen [GET]

Perform an `ANAYLZE` call on the `geo` table to update the global stats.

+ Response 200 (application/json)
    + Body

                {
                    "bbox":  [0,0,1,1],
                    "last_calc": null,
                    "total":0
                }

